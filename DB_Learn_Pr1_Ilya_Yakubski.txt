I apologise for documentation report is not done in docx file as required.
The reason is that Word is read-only without subscription on my device. I tried to make this file in online version, but there was a problem with microsoft account and onedrive storage. 

--- 1 --- Scripts and their results ---

   --- Implementing partitioning ---

CREATE TABLE sales_data (
   sale_id SERIAL,
   sale_date DATE NOT NULL,
   salesperson_id INT NOT NULL,
   region TEXT NOT NULL,
   sale_amount NUMERIC NOT NULL,
   PRIMARY KEY (sale_id, sale_date)
) PARTITION BY RANGE (sale_date);

CREATE TABLE sales_data_2023_04 PARTITION OF sales_data
   FOR VALUES FROM ('2023-04-01') TO ('2023-05-01');

CREATE TABLE sales_data_2023_05 PARTITION OF sales_data
   FOR VALUES FROM ('2023-05-01') TO ('2023-06-01');

CREATE TABLE sales_data_2023_06 PARTITION OF sales_data
   FOR VALUES FROM ('2023-06-01') TO ('2023-07-01');

CREATE TABLE sales_data_2023_07 PARTITION OF sales_data
   FOR VALUES FROM ('2023-07-01') TO ('2023-08-01');

CREATE TABLE sales_data_2023_08 PARTITION OF sales_data
   FOR VALUES FROM ('2023-08-01') TO ('2023-09-01');

CREATE TABLE sales_data_2023_09 PARTITION OF sales_data
   FOR VALUES FROM ('2023-09-01') TO ('2023-10-01');

CREATE TABLE sales_data_2023_10 PARTITION OF sales_data
   FOR VALUES FROM ('2023-10-01') TO ('2023-11-01');
   
CREATE TABLE sales_data_2023_11 PARTITION OF sales_data
   FOR VALUES FROM ('2023-11-01') TO ('2023-12-01');

CREATE TABLE sales_data_2023_12 PARTITION OF sales_data
   FOR VALUES FROM ('2023-12-01') TO ('2024-01-01');

CREATE TABLE sales_data_2024_01 PARTITION OF sales_data
   FOR VALUES FROM ('2024-01-01') TO ('2024-02-01');
   
CREATE TABLE sales_data_2024_02 PARTITION OF sales_data
   FOR VALUES FROM ('2024-02-01') TO ('2024-03-01');

CREATE TABLE sales_data_2024_03 PARTITION OF sales_data
   FOR VALUES FROM ('2024-03-01') TO ('2024-04-01');
   
CREATE TABLE sales_data_2024_04 PARTITION OF sales_data
   FOR VALUES FROM ('2024_04-01') TO ('2024-05-01');


   --- Inserting data (see result on picture 1) ---

WITH synthetic_data AS (
  SELECT
    CURRENT_DATE - INTERVAL '1 month' * (random() * 12 + 1) AS sale_date,
    floor(random() * 10) + 1 AS salesperson_id,
    CASE floor(random() * 3)
      WHEN 0 THEN 'North'
      WHEN 1 THEN 'South'
      ELSE 'East'
    END AS region,
    CAST((random() * (900 - 100) + 100) * 100 AS INTEGER) / 100.0 AS sale_amount
  FROM generate_series(1, 1000)
)
INSERT INTO sales_data (sale_date, salesperson_id, region, sale_amount)
SELECT
  sd.sale_date,
  sd.salesperson_id,
  sd.region,
  sd.sale_amount
FROM synthetic_data sd;


   --- Retrieving all sales for 8th month, 2023 (see result on picture 2) ---

SELECT * FROM sales_data
WHERE sale_date >= '2023-08-01' AND sale_date < '2023-09-01';


   --- Calculating the total sale_amount for each month (see result on picture 3) ---

SELECT 
    EXTRACT(YEAR FROM sale_date) AS year,
    EXTRACT(MONTH FROM sale_date) AS month,
    SUM(sale_amount) AS total_sales
FROM sales_data
GROUP BY 1, 2
ORDER BY year, month;


 --- Top 3 salesperson_id within South region (see result on picture 4) ---

SELECT salesperson_id, SUM(sale_amount) AS total_sales
FROM sales_data
WHERE region = 'South'
GROUP BY salesperson_id
ORDER BY total_sales DESC
LIMIT 3;


   --- Maintenance task ---

CREATE OR REPLACE FUNCTION manage_partitions()
RETURNS void LANGUAGE plpgsql AS $$
DECLARE
    current_month DATE;
    target_month DATE;
    partition_name TEXT;
    old_partition_name TEXT;
    query TEXT;
BEGIN
    current_month := DATE_TRUNC('month', CURRENT_DATE);

    target_month := current_month + INTERVAL '1 month';

    partition_name := 'sales_data_' || TO_CHAR(target_month, 'YYYY_MM');
    old_partition_name := 'sales_data_' || TO_CHAR(current_month - INTERVAL '13 months', 'YYYY_MM');

    EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(old_partition_name);

    query := FORMAT('CREATE TABLE %I PARTITION OF sales_data FOR VALUES FROM (%L) TO (%L)',
                    partition_name, TO_CHAR(target_month, 'YYYY-MM-DD'), TO_CHAR(target_month + INTERVAL '1 month', 'YYYY-MM-DD'));

    EXECUTE query;

    RAISE NOTICE 'Partition management completed: Dropped % and created %', old_partition_name, partition_name;
END;
$$;



--- 2 --- Documentation report ---


   --- Explaination of partitioning strategy ---

The choice of monthly range partitioning for the sales_data table based on the sale_date has several benefits. Partitioning by month is connected with business cycles and reporting periods, making it easier to manage and query data relevant to specific time periods. This strategy makes performance more effective by reducing query execution time. Queries that filter by date can scan only relevant partitions instead of whole database, which is much better for large datasets. Furthermore, such partitioning simplifies data maintenance tasks like data archiving, where older data can be dropped without affecting the rest of the data. This method also improves insert performance as data automatically travels to the appropriate partition. Lastly, it supports efficient scalability by distributing the load across multiple partitions, which can be an advantage in distributed databases.



   --- Steps taken to implement the partitioned table ---

To implement the partitioned table for storing sales data, there was defined the main table schema with the necessary columns. The table was then partitioned by range based on the sale_date column. This partitioning logic was put directly into the CREATE TABLE, specifying PARTITION BY RANGE (sale_date). Next, specific monthly partitions were created for each of the past 12 months. Each partition was defined with a CREATE TABLE statement that included the partition range, detailing the first and last dates for each month. This structure enables efficient data management and querying, using the benefits of partitioning such as better query performance and easier maintenance.


   --- Maintenance strategy ---

The maintenance strategy for the partitioned table is based on routine schedule designed to optimize performance and manage data effectively. Each month, the strategy involves dropping partitions that are older than 12 months and creating new partitions for the upcoming month. This approach ensures that the database only holds the most relevant data for analysis, reducing storage costs and improving query efficiency by limiting the amount of data the system needs to scan. Dropping old partitions is a straight operation that avoids the performance overhead of deleting rows from a large dataset, while creating new partitions in advance prepares the database for incoming data without damaging service availability. Scheduled as a monthly automated task, this maintenance routine keeps the database ordered, ensuring that data remains operable and accessible without keeping outdated information that is no longer needed.


   --- Personal outcomes ---

In process of completing this task I got deeper understanding of database optimization techniques and handling large datasets efficiently. The process of designing partitioning schemes based on time-series data provided valuable ideas of fitting databases into specific requirements, increasing both query performance and data management. Some challenges appeared in navigating the nuances of PostgreSQL syntax for partitioning and dynamically managing partitions with automated scripts. This required close attention to details and thorough testing to ensure reliability. Nonetheless, dealing with those challenges gave me more experience in SQL scripting and database administration and maintenance. Overall, this task was a good opportunity for skill development in database optimization and management techniques.